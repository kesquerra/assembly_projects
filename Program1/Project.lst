Microsoft (R) Macro Assembler Version 14.24.28316.0	    04/10/20 12:31:29
-Sum and Differences of 3 Numbers		(prog1.asm   Page 1 - 1


				TITLE Sum and Differences of 3 Numbers		(prog1.asm)

				; Author: Kyle Esquerra
				; Last Modified: 03/29/2020
				; OSU email address: esquerrk@oregonstate.edu
				; Course number/section: C400_S2020
				; Project Number: 1                Due Date: 04/12/2020
				; Description: Get 3 numbers from user, calculate and display sum and differences of numbers

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 41 75 74 68 6F	authName		BYTE	"Author: Kyle Esquerra",0
	   72 3A 20 4B 79
	   6C 65 20 45 73
	   71 75 65 72 72
	   61 00
 00000016 54 69 74 6C 65	progTitle		BYTE	"Title: Sum and Differences of 3 Numbers",0
	   3A 20 53 75 6D
	   20 61 6E 64 20
	   44 69 66 66 65
	   72 65 6E 63 65
	   73 20 6F 66 20
	   33 20 4E 75 6D
	   62 65 72 73 00
 0000003E 45 6E 74 65 72	instrString		BYTE	"Enter 3 numbers in descending order.",0
	   20 33 20 6E 75
	   6D 62 65 72 73
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2E 00
 00000063 46 69 72 73 74	promptNumA		BYTE	"First number: ",0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 00000072 53 65 63 6F 6E	promptNumB		BYTE	"Second number: ",0
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000082 54 68 69 72 64	promptNumC		BYTE	"Third number: ",0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 00000091 00000000		numA			DWORD	?
 00000095 00000000		numB			DWORD	?
 00000099 00000000		numC			DWORD	?
 0000009D 00000000		sumAB			DWORD	?
 000000A1 00000000		sumAC			DWORD	?
 000000A5 00000000		sumBC			DWORD	?
 000000A9 00000000		sumABC			DWORD	?
 000000AD 00000000		diffAB			DWORD	?
 000000B1 00000000		diffAC			DWORD	?
 000000B5 00000000		diffBC			DWORD	?
 000000B9 00000000		diffBA			DWORD	?
 000000BD 00000000		diffCA			DWORD	?
 000000C1 00000000		diffCB			DWORD	?
 000000C5 00000000		diffCBA			DWORD	?
 000000C9 47 6F 6F 64 62	goodbye			BYTE	"Goodbye!",0
	   79 65 21 00
 000000D2 20 2B 20 00		plus			BYTE	' + ',0
 000000D6 20 2D 20 00		minus			BYTE	' - ',0
 000000DA 20 3D 20 00		equals			BYTE	' = ',0
 000000DE 54 68 65 20 6E	invalidNum		BYTE	"The numbers are not in descending order.",0
	   75 6D 62 65 72
	   73 20 61 72 65
	   20 6E 6F 74 20
	   69 6E 20 64 65
	   73 63 65 6E 64
	   69 6E 67 20 6F
	   72 64 65 72 2E
	   00
 00000107 45 6E 74 65 72	promptCon		BYTE	"Enter 0 to quit or any other integer to continue: ",0
	   20 30 20 74 6F
	   20 71 75 69 74
	   20 6F 72 20 61
	   6E 79 20 6F 74
	   68 65 72 20 69
	   6E 74 65 67 65
	   72 20 74 6F 20
	   63 6F 6E 74 69
	   6E 75 65 3A 20
	   00
 0000013A 2A 2A 45 43 3A	ec1				BYTE	"**EC: Program repeats until user chooses to quit.",0
	   20 50 72 6F 67
	   72 61 6D 20 72
	   65 70 65 61 74
	   73 20 75 6E 74
	   69 6C 20 75 73
	   65 72 20 63 68
	   6F 6F 73 65 73
	   20 74 6F 20 71
	   75 69 74 2E 00
 0000016C 2A 2A 45 43 3A	ec2				BYTE	"**EC: Program checks if numbers are in non-descending order.",0
	   20 50 72 6F 67
	   72 61 6D 20 63
	   68 65 63 6B 73
	   20 69 66 20 6E
	   75 6D 62 65 72
	   73 20 61 72 65
	   20 69 6E 20 6E
	   6F 6E 2D 64 65
	   73 63 65 6E 64
	   69 6E 67 20 6F
	   72 64 65 72 2E
	   00
 000001A9 2A 2A 45 43 3A	ec3				BYTE	"**EC: Program handles negative results and computes B-A, C-A, C-B, C-B-A.",0
	   20 50 72 6F 67
	   72 61 6D 20 68
	   61 6E 64 6C 65
	   73 20 6E 65 67
	   61 74 69 76 65
	   20 72 65 73 75
	   6C 74 73 20 61
	   6E 64 20 63 6F
	   6D 70 75 74 65
	   73 20 42 2D 41
	   2C 20 43 2D 41
	   2C 20 43 2D 42
	   2C 20 43 2D 42
	   2D 41 2E 00

 00000000			.code
 00000000			main PROC

				;introduction
					;author name
 00000000  BA 00000000 R		mov		edx, OFFSET authName
 00000005  E8 00000000 E		call	WriteString
 0000000A  E8 00000000 E		call	CrLf

					;program title
 0000000F  BA 00000016 R		mov		edx, OFFSET progTitle
 00000014  E8 00000000 E		call	WriteString
 00000019  E8 00000000 E		call	CrLf

					;extra credit 1-3
 0000001E  BA 0000013A R		mov		edx, OFFSET ec1
 00000023  E8 00000000 E		call	WriteString
 00000028  E8 00000000 E		call	CrLf
 0000002D  BA 0000016C R		mov		edx, OFFSET ec2
 00000032  E8 00000000 E		call	WriteString
 00000037  E8 00000000 E		call	CrLf
 0000003C  BA 000001A9 R		mov		edx, OFFSET ec3
 00000041  E8 00000000 E		call	WriteString
 00000046  E8 00000000 E		call	CrLf
 0000004B  E8 00000000 E		call	CrLf

					;program instructions
 00000050  BA 0000003E R		mov		edx, OFFSET instrString
 00000055  E8 00000000 E		call	WriteString
 0000005A  E8 00000000 E		call	CrLf
 0000005F  E8 00000000 E		call	CrLf
					
					;skip error message
 00000064  EB 14			jmp		beg

					;error message for invalid descending order
 00000066			error:
 00000066  BA 000000DE R		mov		edx, OFFSET invalidNum
 0000006B  E8 00000000 E		call	WriteString
 00000070  E8 00000000 E		call	CrLf
 00000075  E8 00000000 E		call	CrLf

				;get the data
 0000007A			beg:
					;get numA
 0000007A  BA 00000063 R		mov		edx, OFFSET promptNumA
 0000007F  E8 00000000 E		call	WriteString
 00000084  E8 00000000 E		call	ReadInt
 00000089  A3 00000091 R		mov		numA, eax

					;get numB
 0000008E  BA 00000072 R		mov		edx, OFFSET promptNumB
 00000093  E8 00000000 E		call	WriteString
 00000098  E8 00000000 E		call	ReadInt
 0000009D  A3 00000095 R		mov		numB, eax

					;get numC
 000000A2  BA 00000082 R		mov		edx, OFFSET promptNumC
 000000A7  E8 00000000 E		call	WriteString
 000000AC  E8 00000000 E		call	ReadInt
 000000B1  A3 00000099 R		mov		numC, eax
 000000B6  E8 00000000 E		call	CrLf

				;compare values
					;set comparison value
 000000BB  A1 00000095 R		mov		eax, numB
					;if B is greater than A, error
 000000C0  3B 05 00000091 R		cmp		eax, numA
 000000C6  7F 9E			jg		error
					;if B is less than C, error
 000000C8  3B 05 00000099 R		cmp		eax, numC
 000000CE  7C 96			jl		error


				;calculate the required values
					;calc A + B
 000000D0  A1 00000091 R		mov		eax, numA
 000000D5  03 05 00000095 R		add		eax, numB
 000000DB  A3 0000009D R		mov		sumAB, eax

					;calc A - B
 000000E0  A1 00000091 R		mov		eax, numA
 000000E5  2B 05 00000095 R		sub		eax, numB
 000000EB  A3 000000AD R		mov		diffAB, eax

					;calc A + C
 000000F0  A1 00000091 R		mov		eax, numA
 000000F5  03 05 00000099 R		add		eax, numC
 000000FB  A3 000000A1 R		mov		sumAC, eax

					;calc A - C
 00000100  A1 00000091 R		mov		eax, numA
 00000105  2B 05 00000099 R		sub		eax, numC
 0000010B  A3 000000B1 R		mov		diffAC, eax

					;calc B + C
 00000110  A1 00000095 R		mov		eax, numB
 00000115  03 05 00000099 R		add		eax, numC
 0000011B  A3 000000A5 R		mov		sumBC, eax

					;calc B - C
 00000120  A1 00000095 R		mov		eax, numB
 00000125  2B 05 00000099 R		sub		eax, numC
 0000012B  A3 000000B5 R		mov		diffBC, eax

					;calc A + B + C
 00000130  A1 00000091 R		mov		eax, numA
 00000135  03 05 00000095 R		add		eax, numB
 0000013B  03 05 00000099 R		add		eax, numC
 00000141  A3 000000A9 R		mov		sumABC, eax

					;calc B - A
 00000146  A1 00000095 R		mov		eax, numB
 0000014B  2B 05 00000091 R		sub		eax, numA
 00000151  A3 000000B9 R		mov		diffBA, eax

					;calc C - A
 00000156  A1 00000099 R		mov		eax, numC
 0000015B  2B 05 00000091 R		sub		eax, numA
 00000161  A3 000000BD R		mov		diffCA, eax

					;calc C - B
 00000166  A1 00000099 R		mov		eax, numC
 0000016B  2B 05 00000095 R		sub		eax, numB
 00000171  A3 000000C1 R		mov		diffCB, eax

					;calc C - B - A
 00000176  A1 00000099 R		mov		eax, numC
 0000017B  2B 05 00000095 R		sub		eax, numB
 00000181  2B 05 00000091 R		sub		eax, numA
 00000187  A3 000000C5 R		mov		diffCBA, eax



				;display the results
					;A + B
 0000018C  A1 00000091 R		mov		eax, numA
 00000191  E8 00000000 E		call	WriteDec
 00000196  BA 000000D2 R		mov		edx, OFFSET plus
 0000019B  E8 00000000 E		call	WriteString
 000001A0  A1 00000095 R		mov		eax, numB
 000001A5  E8 00000000 E		call	WriteDec
 000001AA  BA 000000DA R		mov		edx, OFFSET equals
 000001AF  E8 00000000 E		call	WriteString
 000001B4  A1 0000009D R		mov		eax, sumAB
 000001B9  E8 00000000 E		call	WriteDec
 000001BE  E8 00000000 E		call	CrLf

					;A - B
 000001C3  A1 00000091 R		mov		eax, numA
 000001C8  E8 00000000 E		call	WriteDec
 000001CD  BA 000000D6 R		mov		edx, OFFSET minus
 000001D2  E8 00000000 E		call	WriteString
 000001D7  A1 00000095 R		mov		eax, numB
 000001DC  E8 00000000 E		call	WriteDec
 000001E1  BA 000000DA R		mov		edx, OFFSET equals
 000001E6  E8 00000000 E		call	WriteString
 000001EB  A1 000000AD R		mov		eax, diffAB
 000001F0  E8 00000000 E		call	WriteDec
 000001F5  E8 00000000 E		call	CrLf

					;A + C
 000001FA  A1 00000091 R		mov		eax, numA
 000001FF  E8 00000000 E		call	WriteDec
 00000204  BA 000000D2 R		mov		edx, OFFSET plus
 00000209  E8 00000000 E		call	WriteString
 0000020E  A1 00000099 R		mov		eax, numC
 00000213  E8 00000000 E		call	WriteDec
 00000218  BA 000000DA R		mov		edx, OFFSET equals
 0000021D  E8 00000000 E		call	WriteString
 00000222  A1 000000A1 R		mov		eax, sumAC
 00000227  E8 00000000 E		call	WriteDec
 0000022C  E8 00000000 E		call	CrLf

					;A - C
 00000231  A1 00000091 R		mov		eax, numA
 00000236  E8 00000000 E		call	WriteDec
 0000023B  BA 000000D6 R		mov		edx, OFFSET minus
 00000240  E8 00000000 E		call	WriteString
 00000245  A1 00000099 R		mov		eax, numC
 0000024A  E8 00000000 E		call	WriteDec
 0000024F  BA 000000DA R		mov		edx, OFFSET equals
 00000254  E8 00000000 E		call	WriteString
 00000259  A1 000000B1 R		mov		eax, diffAC
 0000025E  E8 00000000 E		call	WriteDec
 00000263  E8 00000000 E		call	CrLf
					
					;B + C
 00000268  A1 00000095 R		mov		eax, numB
 0000026D  E8 00000000 E		call	WriteDec
 00000272  BA 000000D2 R		mov		edx, OFFSET plus
 00000277  E8 00000000 E		call	WriteString
 0000027C  A1 00000099 R		mov		eax, numC
 00000281  E8 00000000 E		call	WriteDec
 00000286  BA 000000DA R		mov		edx, OFFSET equals
 0000028B  E8 00000000 E		call	WriteString
 00000290  A1 000000A5 R		mov		eax, sumBC
 00000295  E8 00000000 E		call	WriteDec
 0000029A  E8 00000000 E		call	CrLf

					;B - C
 0000029F  A1 00000095 R		mov		eax, numB
 000002A4  E8 00000000 E		call	WriteDec
 000002A9  BA 000000D6 R		mov		edx, OFFSET minus
 000002AE  E8 00000000 E		call	WriteString
 000002B3  A1 00000099 R		mov		eax, numC
 000002B8  E8 00000000 E		call	WriteDec
 000002BD  BA 000000DA R		mov		edx, OFFSET equals
 000002C2  E8 00000000 E		call	WriteString
 000002C7  A1 000000B5 R		mov		eax, diffBC
 000002CC  E8 00000000 E		call	WriteDec
 000002D1  E8 00000000 E		call	CrLf

					;A + B + C
 000002D6  A1 00000091 R		mov		eax, numA
 000002DB  E8 00000000 E		call	WriteDec
 000002E0  BA 000000D2 R		mov		edx, OFFSET plus
 000002E5  E8 00000000 E		call	WriteString
 000002EA  A1 00000095 R		mov		eax, numB
 000002EF  E8 00000000 E		call	WriteDec
 000002F4  BA 000000D2 R		mov		edx, OFFSET plus
 000002F9  E8 00000000 E		call	WriteString
 000002FE  A1 00000099 R		mov		eax, numC
 00000303  E8 00000000 E		call	WriteDec
 00000308  BA 000000DA R		mov		edx, OFFSET equals
 0000030D  E8 00000000 E		call	WriteString
 00000312  A1 000000A9 R		mov		eax, sumABC
 00000317  E8 00000000 E		call	WriteDec
 0000031C  E8 00000000 E		call	CrLf
 00000321  E8 00000000 E		call	CrLf

					;B - A
 00000326  A1 00000095 R		mov		eax, numB
 0000032B  E8 00000000 E		call	WriteDec
 00000330  BA 000000D6 R		mov		edx, OFFSET minus
 00000335  E8 00000000 E		call	WriteString
 0000033A  A1 00000091 R		mov		eax, numA
 0000033F  E8 00000000 E		call	WriteDec
 00000344  BA 000000DA R		mov		edx, OFFSET equals
 00000349  E8 00000000 E		call	WriteString
 0000034E  A1 000000B9 R		mov		eax, diffBA
 00000353  E8 00000000 E		call	WriteInt
 00000358  E8 00000000 E		call	CrLf

					;C - A
 0000035D  A1 00000099 R		mov		eax, numC
 00000362  E8 00000000 E		call	WriteDec
 00000367  BA 000000D6 R		mov		edx, OFFSET minus
 0000036C  E8 00000000 E		call	WriteString
 00000371  A1 00000091 R		mov		eax, numA
 00000376  E8 00000000 E		call	WriteDec
 0000037B  BA 000000DA R		mov		edx, OFFSET equals
 00000380  E8 00000000 E		call	WriteString
 00000385  A1 000000BD R		mov		eax, diffCA
 0000038A  E8 00000000 E		call	WriteInt
 0000038F  E8 00000000 E		call	CrLf

					;C - B
 00000394  A1 00000099 R		mov		eax, numC
 00000399  E8 00000000 E		call	WriteDec
 0000039E  BA 000000D6 R		mov		edx, OFFSET minus
 000003A3  E8 00000000 E		call	WriteString
 000003A8  A1 00000095 R		mov		eax, numB
 000003AD  E8 00000000 E		call	WriteDec
 000003B2  BA 000000DA R		mov		edx, OFFSET equals
 000003B7  E8 00000000 E		call	WriteString
 000003BC  A1 000000C1 R		mov		eax, diffCB
 000003C1  E8 00000000 E		call	WriteInt
 000003C6  E8 00000000 E		call	CrLf

					;C - B - A
 000003CB  A1 00000099 R		mov		eax, numC
 000003D0  E8 00000000 E		call	WriteDec
 000003D5  BA 000000D6 R		mov		edx, OFFSET minus
 000003DA  E8 00000000 E		call	WriteString
 000003DF  A1 00000095 R		mov		eax, numB
 000003E4  E8 00000000 E		call	WriteDec
 000003E9  BA 000000D6 R		mov		edx, OFFSET minus
 000003EE  E8 00000000 E		call	WriteString
 000003F3  A1 00000091 R		mov		eax, numA
 000003F8  E8 00000000 E		call	WriteDec
 000003FD  BA 000000DA R		mov		edx, OFFSET equals
 00000402  E8 00000000 E		call	WriteString
 00000407  A1 000000C5 R		mov		eax, diffCBA
 0000040C  E8 00000000 E		call	WriteInt
 00000411  E8 00000000 E		call	CrLf
 00000416  E8 00000000 E		call	CrLf

					;ask user to continue
 0000041B  BA 00000107 R		mov		edx, OFFSET promptCon
 00000420  E8 00000000 E		call	WriteString
 00000425  E8 00000000 E		call	ReadInt
 0000042A  83 F8 01			cmp		eax, 1
 0000042D  7C 05			jl		endLoop
 0000042F  E9 FFFFFC46			jmp		beg


				;say goodbye
 00000434			endLoop:
 00000434  BA 000000C9 R		mov		edx, OFFSET goodbye
 00000439  E8 00000000 E		call	WriteString
 0000043E  E8 00000000 E		call	CrLf

				;exit program
					exit
 00000443  6A 00	   *	    push   +000000000h
 00000445  E8 00000000 E   *	    call   ExitProcess
 0000044A			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.24.28316.0	    04/10/20 12:31:29
-Sum and Differences of 3 Numbers		(prog1.asm   Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001F3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000044A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000044A Public STDCALL
  error  . . . . . . . . . . . .	L Near	 00000066 _TEXT	
  beg  . . . . . . . . . . . . .	L Near	 0000007A _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 00000434 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
authName . . . . . . . . . . . .	Byte	 00000000 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
diffAB . . . . . . . . . . . . .	DWord	 000000AD _DATA	
diffAC . . . . . . . . . . . . .	DWord	 000000B1 _DATA	
diffBA . . . . . . . . . . . . .	DWord	 000000B9 _DATA	
diffBC . . . . . . . . . . . . .	DWord	 000000B5 _DATA	
diffCA . . . . . . . . . . . . .	DWord	 000000BD _DATA	
diffCBA  . . . . . . . . . . . .	DWord	 000000C5 _DATA	
diffCB . . . . . . . . . . . . .	DWord	 000000C1 _DATA	
ec1  . . . . . . . . . . . . . .	Byte	 0000013A _DATA	
ec2  . . . . . . . . . . . . . .	Byte	 0000016C _DATA	
ec3  . . . . . . . . . . . . . .	Byte	 000001A9 _DATA	
equals . . . . . . . . . . . . .	Byte	 000000DA _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000000C9 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instrString  . . . . . . . . . .	Byte	 0000003E _DATA	
invalidNum . . . . . . . . . . .	Byte	 000000DE _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
minus  . . . . . . . . . . . . .	Byte	 000000D6 _DATA	
numA . . . . . . . . . . . . . .	DWord	 00000091 _DATA	
numB . . . . . . . . . . . . . .	DWord	 00000095 _DATA	
numC . . . . . . . . . . . . . .	DWord	 00000099 _DATA	
plus . . . . . . . . . . . . . .	Byte	 000000D2 _DATA	
progTitle  . . . . . . . . . . .	Byte	 00000016 _DATA	
promptCon  . . . . . . . . . . .	Byte	 00000107 _DATA	
promptNumA . . . . . . . . . . .	Byte	 00000063 _DATA	
promptNumB . . . . . . . . . . .	Byte	 00000072 _DATA	
promptNumC . . . . . . . . . . .	Byte	 00000082 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumABC . . . . . . . . . . . . .	DWord	 000000A9 _DATA	
sumAB  . . . . . . . . . . . . .	DWord	 0000009D _DATA	
sumAC  . . . . . . . . . . . . .	DWord	 000000A1 _DATA	
sumBC  . . . . . . . . . . . . .	DWord	 000000A5 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
